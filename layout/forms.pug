-
  const cachebust = Date.now()
  let title = 'LINE 數位版名片'
  let description = '請點此建立 LINE 數位版名片，如果沒有想要的樣式，歡迎一起貢獻名片樣板。'
doctype html
block beforehtml
html
  head
    meta(charset="UTF-8")
    meta(http-equiv="X-UA-Compatible", content="IE=edge")
    meta(name="viewport", content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, viewport-fit=cover, user-scalable=no")
    title= title
    meta(name="description", content=description)
    meta(property="og:description", content=description)
    meta(property="og:title", content=title)
    meta(property="og:type", content="website")
    block meta
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@4/dist/css/bootstrap.min.css")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css")
    link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&display=swap")
    style
      :sass
        [v-cloak]
          display: none
        body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
          font-family: 'Noto Sans TC', sans-serif
        input, textarea
          font-family: SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace!important
        .swal2-textarea
          &.form-control
            padding: .375rem .75rem
            font-size: 1rem
            color: #495057
            border-radius: .25rem
          &.form-control-sm
            padding: .25rem .5rem
            font-size: .875rem
            border-radius: .2rem
    block style
  body
    include /component/livereload
    block compoment-gtag
      include /component/gtag
    include /component/navbar
    #app.container.my-4(v-cloak)
      h2.my-3.text-center= title
      block form
      .row.mx-n2.my-2.d-flex
        button.btn.btn-danger.flex-fill.mx-2.my-1(type="button", @click="btnReset") #[i.fa.mr-2.fa-repeat] 重設表單
        button.btn.btn-info.flex-fill.mx-2.my-1(type="button", @click="btnExport") #[i.fa.mr-2.fa-code] 匯出匯入
        a.btn.btn-primary.flex-fill.mx-2.my-1(:href="shortcut", target="_blank") #[i.fa.mr-2.fa-id-card-o] 建立名片
      #modal-exportimport.modal.fade(data-backdrop="static", data-keyboard="false", tabindex="-1", ref="modalExportImport")
        .modal-dialog.modal-dialog-centered.modal-xl.align-items-stretch
          .modal-content
            .modal-body.d-flex.flex-column
              textarea.form-control.form-control-sm.flex-fill(v-model="exportimport.text")
              small.text-muted.form-text 請複製匯出的資料，或貼上之前的資料並點一下「匯入」按鈕。
            .modal-footer
              button.btn.btn-outline-success(type="button", @click="btnCopy(exportimport.text, $refs['modalExportImport'])") 複製
              button.btn.btn-secondary(type="button", @click="jqModal('modalExportImport', 'hide')") 關閉
              button.btn.btn-primary(type="button", @click="btnImport") 匯入
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/crypto-js@3/crypto-js.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/js-base64@3/base64.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/json5@2/dist/index.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/lodash@4/lodash.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/pako@2/dist/pako.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/papaparse@5/papaparse.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/popper.js@1/dist/umd/popper.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/qs@6/dist/qs.min.js")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/sweetalert2@11")
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.min.js")
    //- bootstrap require jquery and pupper
    script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/bootstrap@4/dist/js/bootstrap.min.js")
    script(src=`${baseurl}js/common.js?cachebust=${cachebust}`)
    script.
      window.vueConfig = {
        el: '#app',
        data: {
          exportimport: {
            text: '',
            visible: false,
          },
        },
        async mounted () {
          try {
            window.gtagInit()
            window.gtagScreenView('瀏覽製作「#{title}」名片網頁')
            window.backupVcard = JSON5.stringify(_.get(this, 'vcard', {}))
            this.loadVcard()
            await this.onloadVcard()
            this.watchVcard()
            window.gtagTiming('after mounted')
          } catch (err) {
            await Swal.fire({ icon: 'error', title: '初始化失敗', text: err.message })
            await this.btnReset(false)
            location.reload()
          }
        },
        computed: {
          shortcut () {
            const params = window.httpBuildQuery(_.mapValues(this.vcard, window.encodeBase64url))
            if (!_.isString(params) || !params.length) return
            return `https://liff.line.me/#{liffidFull}/share.html?${params}`
          },
        },
        methods: {
          loadVcard () {
            try {
              const saved = JSON5.parse(localStorage.getItem(location.pathname))
              if (saved) this.$set(this, 'vcard', { ...this.vcard, ...saved })
            } catch (err) {}
            window.gtagTiming('after loadVcard')
          },
          async onloadVcard () {}, // abstract
          watchVcard () {
            this.$watch('vcard', () => {
              localStorage.setItem(location.pathname, JSON5.stringify(this.vcard))
            }, { deep: true })
            window.gtagTiming('after watchVcard')
          },
          async btnReset (confirm = true) {
            try {
              if (confirm) {
                window.gtagEvent('瀏覽製作「#{title}」名片網頁', 'btnReset', this.vcard.template)
                confirm = await Swal.fire({
                  cancelButtonColor: '#3085d6',
                  cancelButtonText: '保持原樣',
                  confirmButtonColor: '#d33',
                  confirmButtonText: '重設資料',
                  focusCancel: true,
                  icon: 'warning',
                  showCancelButton: true,
                  text: '請問你是否要是否重設本頁面的資料？',
                })
                if (!confirm.value) return
              }

              this.$set(this, 'vcard', JSON5.parse(window.backupVcard))
              this.onloadVcard()
            } catch (err) {
              window.logError({ err, fatal: true })
            }
          },
          async exportVcard () {
            return JSON.stringify(window.beautifyFlex(this.vcard), null, 2)
          },
          async importVcard (imported) {
            imported = window.parseJsonOrDefault(imported)
            if (!imported) throw new Error('無法解析匯入的 JSON5')
            this.$set(this, 'vcard', imported)
          },
          async btnCopy (text, container = null) {
            if (!container) container = document.body
            const dom = document.createElement('textarea')
            dom.value = text
            container.appendChild(dom)
            dom.select()
            dom.setSelectionRange(0, 1e6) // For mobile devices
            document.execCommand('copy')
            container.removeChild(dom)
            await Swal.fire({ icon: 'success', title: '複製成功' })
          },
          async btnExport () {
            try {
              const exported = await this.exportVcard()
              this.exportimport.text = exported
              this.jqModal('modalExportImport', 'show')
            } catch (err) {
              window.logError({ err, fatal: true })
              await Swal.fire({ icon: 'error', title: '匯出失敗', text: err.message })
            }
          },
          async btnImport () {
            try {
              this.jqModal('modalExportImport', 'hide')
              const imported = _.trim(this.exportimport.text)
              console.log({ imported })
              await this.importVcard(imported)
              this.exportimport.text = ''
            } catch (err) {
              window.logError({ err })
              await Swal.fire({ icon: 'error', title: '匯入失敗', text: err.message })
            }
          },
          jqModal (ref, action) {
            window.jQuery(this.$refs[ref]).modal(action)
          },
        },
      }
    //- 給予修改 vueConfig 的機會
    block vue-config
    script.
      (async () => {
        if (_.isFunction(window.beforeVueCreate)) await window.beforeVueCreate()
        window.vm = new Vue(window.vueConfig)
      })()
